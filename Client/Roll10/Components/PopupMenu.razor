<div class="fixed lg:right-16 lg:bottom-14 right-5 bottom-5 z-10">
    @if(_isMenuShowing)
    {
        <div style="height: calc(100vh - 10.5rem);" class="w-80 overflow-scroll bg-slate-50 rounded-lg p-3 m-4 shadow-lg shadow-slate-900" id="menu-container">
            <div class="flex flex-row">
                <div class="w-1/2 flex justify-center hover:cursor-pointer" @onclick="() => ChangeMode(Mode.DiceLog)">
                    <img src="images/dicegray.svg" class="h-5 w-5 @GetHighlightCss(Mode.DiceLog)" />
                </div>
                <div class="w-1/2 flex justify-center hover:cursor-pointer" @onclick="() => ChangeMode(Mode.Settings)">
                    <img src="images/gear.svg" class="h-5 w-5 @GetHighlightCss(Mode.Settings)" />
                </div>
            </div>
            <div class="h-3"></div>
            <p class="font-bold uppercase text-center">@GetTitle()</p>
            <hr />
            @if(_currentMode == Mode.DiceLog)
            {
                <DiceLog />
            }
            @if(_currentMode == Mode.Settings)
            {
                <SettingsMenu />
            }
        </div>
    }
    <div class="flex justify-end w-full">
        <div class="rounded-full bg-slate-50 shadow-lg shadow-slate-900">
            <img src="images/dice.svg" class="h-14 w-14" @onclick="ToggleMenuShowing" />
        </div>
    </div>
</div>

@code
{
    private enum Mode
    {
        DiceLog,
        Settings
    }
    private Mode _currentMode = Mode.DiceLog;
    private bool _isMenuShowing = false;

    private void ToggleMenuShowing()
    {
        _isMenuShowing = !_isMenuShowing;
    }

    private string GetHighlightCss(Mode isSelected)
    {
        return (isSelected == _currentMode) switch {
            true => "ring-4 ring-blue-300/50 ring-offset-2 rounded-full",
            false => ""
        };
    }

    private void ChangeMode(Mode selected)
    {
        _currentMode = selected;
    }

    private string GetTitle()
    {
        return _currentMode switch {
            Mode.DiceLog => "Dice Log",
            Mode.Settings => "Settings",
            _ => throw new Exception("Unhandled mode")
        };
    }
}