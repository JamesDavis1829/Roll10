@using Roll10.Services
@using Roll10.Domain.Interfaces
@using Roll10.Domain.Models
@using Roll10.Domain.Services
@inject GlobalRefreshService GlobalRefreshService
@inject ToastService ToastService
@inject DiceLogService DiceLogService


<div id="@TargetCharacter.id" class="flex justify-center">
    <div class="rounded shadow-lg shadow-slate-800 bg-slate-50 w-full m-5">
        <p class="text-center rounded-t font-extrabold text-white bg-slate-600 text-xl uppercase">@TargetCharacter.name</p>
        <div class="flex flex-wrap justify-center">
            @foreach (var stat in GetStats())
            {
                <div
                    id='@TargetCharacter.id + "-" + @stat.Item1'
                    class="w-20 h-20 m-5 rounded-full border-4 border-slate-400 bg-slate-700 text-white shadow-lg shadow-slate-800 hover:cursor-pointer"
                     title="@stat.Item1" @onclick="@(() => RollStat(stat.Item2, stat.Item1))">
                    <div class="h-3"></div>
                    <p class="text-center font-bold">@stat.Item3</p>
                    <p class="text-center font-bold">@stat.Item2</p>
                </div>
            }
            <div class="relative w-20 h-20 m-5 rounded-full border-4 border-red-700 bg-red-500 text-white shadow-lg shadow-slate-800"
                 title="HP">
                <div class="h-3"></div>
                <p class="text-center font-bold">@TargetCharacter.hp</p>
                <p class="text-center font-bold select-none">HP</p>
                <div
                    id='@TargetCharacter.id + "-hp-increment"'
                    class="absolute h-20 w-7 top-0 left-0 hover:cursor-pointer" 
                    @onclick='@(() => ApplyStatOperation(1, "HP"))'>
                    <span class="absolute top-5 left-1 font-extrabold select-none">+</span>
                </div>
                <div
                    id='@TargetCharacter.id + "-hp-decrement"'
                    class="absolute h-20 w-7 top-0 right-0 hover:cursor-pointer" 
                    @onclick='@(() => ApplyStatOperation(-1, "HP"))'>
                    <span class="absolute top-5 right-1 font-extrabold select-none">-</span>
                </div>
            </div>
            <div class="relative w-20 h-20 m-5 rounded-full border-4 border-green-700 bg-green-500 text-white shadow-lg shadow-slate-800"
                 title="HP">
                <div class="h-3"></div>
                <p class="text-center font-bold">@TargetCharacter.current_stamina</p>
                <p class="text-center font-bold select-none">STA</p>
                <div
                    id='@TargetCharacter.id + "-stamina-increment"'
                    class="absolute h-20 w-7 top-0 left-0 hover:cursor-pointer" 
                    @onclick='@(() => ApplyStatOperation(1, "STA"))'>
                    <span class="absolute top-5 left-1 font-extrabold select-none">+</span>
                </div>
                <div
                    id='@TargetCharacter.id + "-stamina-decrement"'
                    class="absolute h-20 w-7 top-0 right-0 hover:cursor-pointer" 
                    @onclick='@(() => ApplyStatOperation(-1, "STA"))'>
                    <span class="absolute top-5 right-1 font-extrabold select-none">-</span>
                </div>
            </div>
        </div>
        <div class="flex flex-col lg:flex-row">
            <div class="w-auto lg:w-1/3 m-3 border-slate-400 rounded shadow-md shadow-slate-800">
                <p class="text-center text-white text-lg bg-slate-600 rounded-t-md">Actions</p>
                <ul class="list-none">
                    @if(!AllCharacterActions.Any())
                    {
                        <p class="italic text-center">None</p>
                    }
                    else
                    {
                        foreach (var action in AllCharacterActions)
                        {
                            <RollableEntry Name="@action.name" Item="@action" RollDice="@RollDice">
                                @if (!string.IsNullOrEmpty(action.description))
                                {
                                    <p class="italic">Description: @action.description</p>
                                }
                            </RollableEntry>
                        }
                    }
                </ul>
            </div>
            <div class="w-auto lg:w-1/3 m-3 border-slate-400 rounded shadow-md shadow-slate-800">
                <p class="text-center text-white text-lg bg-slate-600 rounded-t-md up">Equipment</p>
                <ul class="list-none">
                    @if (!TargetCharacter.equipment.Any())
                    {
                        <p class="italic text-center">None</p>
                    }
                    else
                    {
                        foreach (var item in TargetCharacter.equipment)
                        {
                            <RollableEntry Name="@item.name" Item="@item" RollDice="@RollDice" HideDiceRoll="@ItemService.HideDiceRoll(item)">
                                @if (item.wield.Any())
                                {
                                    <p class="italic">Wielding: @string.Join(", ",item.wield)</p>
                                }
                                @if (!string.IsNullOrEmpty(item.range))
                                {
                                    <p class="italic">Range: @item.range</p>
                                }
                                @if (!string.IsNullOrEmpty(item.description))
                                {
                                    <p class="italic">Description: @item.description</p>
                                }
                                <p class="italic">Requirements: STR-@item.strength_requirement
                                    AGI-@item.agility_requirement INT-@item.intelligence_requirement</p>
                            </RollableEntry>
                        }
                    }
                </ul>
            </div>
            <div class="w-auto lg:w-1/3 m-3 border-slate-400 rounded shadow-md shadow-slate-800">
                <p class="text-center text-white text-lg bg-slate-600 rounded-t-md">Spells</p>
                <ul class="list-none">
                    @if(!TargetCharacter.spells.Any())
                    {
                        <p class="italic text-center">None</p>
                    }
                    else
                    {
                        foreach (var spell in TargetCharacter.spells)
                        {
                            <RollableEntry Name="@spell.name" Item="@spell" RollDice="@RollDice">
                                @if (!string.IsNullOrEmpty(spell.range))
                                {
                                    <p class="italic">Range: @spell.range</p>
                                }
                                @if (!string.IsNullOrEmpty(spell.description))
                                {
                                    <p class="italic">Description: @spell.description</p>
                                }
                                <p class="italic">Requirements: INT-@spell.intelligence_requirement</p>
                            </RollableEntry>
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="flex flex-row justify-between">
            <div>
                <button id='@TargetCharacter.id + "-reset"' class="m-2" type="button" @onclick="@ResetCharacter">Reset</button>
            </div>
            <div class="flex flex-row">
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Character Character { get; set; } = new Character();
    [Parameter]
    public List<CharacterAction> AllCharacterActions {get;set;} = new List<CharacterAction>();

    private Character TargetCharacter { get; set; } = new Character();

    private List<(string, string, int)> GetStats()
    {
        var values = new List<(string, string, int)>
        {
            ("Strength", "STR", TargetCharacter.strength),
            ("Agility", "AGI", TargetCharacter.agility),
            ("Durability", "DUR", TargetCharacter.durability),
            ("Stamina", "STA", TargetCharacter.stamina),
            ("Intelligence", "INT", TargetCharacter.intelligence),
            ("Insight", "INS", TargetCharacter.insight)
        };

        return values;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        TargetCharacter = Character;
    }

    private void RollDice(IRollable item)
    {
        var results = DiceService.PerformRoll(TargetCharacter, item);
        DiceLogService.AddDiceLogEntrySubject.OnNext((new DiceLogEntry(
                $"{TargetCharacter.name} - {item.name}",
                results.Item2,
                results.Item1,
                Helpers.GenerateId()
            ), 
            false)
        );
        var effectedCharacter = CharacterService.ApplyEffects(TargetCharacter, item.action_effect);
        TargetCharacter = effectedCharacter;
        GlobalRefreshService.CallRequestRefresh();
    }

    public void ResetCharacter()
    {
        TargetCharacter = Character;
    }

    private void ApplyStatOperation(int op, string stat)
    {
        TargetCharacter = CharacterService.ApplyEffect(TargetCharacter, op, stat);
    }
    
    private void RollStat(string stat, string name)
    {
        var statRoll = new InlineRollable {
            add_base_dice = true,
            name = $"{name} Roll",
            modifiers = $"+ {stat}"
        };
        RollDice(statRoll);
    }
}