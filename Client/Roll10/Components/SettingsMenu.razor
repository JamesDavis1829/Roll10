@implements IDisposable
@using Roll10.Services
@using Roll10.Models
@using System.Reactive
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@inject PocketbaseService Pb
@inject DiceLogService DiceLogService
@inject ToastService ToastService


<div class="h-3">@*spacer*@</div>
@if (!string.IsNullOrEmpty(CurrentUser?.email))
{
    <p class="text-center">@CurrentUser.email</p>
    <div class="text-center my-4">
        <btn class="btn bg-blue-500 text-white hover:bg-blue-700 hover:cursor-pointer" @onclick="LogOut">Log Out</btn>
    </div>
    <EditForm Model="@_idForm" class="text-center my-4" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <label class="block text-gray-700 text-sm font-bold mb-2" for="dice-room-id-entry">
            Dice Room
        </label>
        <InputText
            class="input focus:outline-none focus:shadow-outline"
            id="dice-room-id-entry"
            @bind-Value="_idForm.IdEntry"/>
        <div class="h-4"></div>
        <ValidationSummary></ValidationSummary>
        <button class="btn bg-blue-500 hover:bg-blue-700 text-white hover:cursor-pointer" type="submit" id="dice-room-submit">Change Room</button>
    </EditForm>
    <div class="text-center my-4">
        <button class="btn bg-blue-500 text-white hover:bg-blue-700 hover:cursor-pointer" onclick="@CreateNewDiceRoom" id="create-new-dice-room">Create New Room</button>
    </div>
}
else
{
    <p class="text-center">You must log in to use settings.</p>
    <div class="text-center my-4">
        <a href="/login" id="login-button" class="btn bg-blue-500 hover:bg-blue-700 text-white hover:cursor-pointer">Log In</a>
    </div>
}

@code {
    User? CurrentUser { get; set; } = null;
    private List<IDisposable> _subs = new();
    private bool IsLoading { get; set; } = false;

    public class IdFormModel
    {
        [Required]
        [RegularExpression("[a-z0-9]{15}", ErrorMessage = "Id must be 15 characters" )]
        public string? IdEntry { get; set; }
    }

    private IdFormModel _idForm = new();

    private async Task HandleValidSubmit()
    {
        IsLoading = true;
        await UpdateDiceRoom(_idForm.IdEntry!);
        IsLoading = false;
    }

    private async Task UpdateDiceRoom(string roomId)
    {
        var dataString = JsonSerializer.Serialize(new { diceroom = roomId });
        var result = await Pb.UpdateItem("users", CurrentUser?.id ?? "", dataString);
        await Pb.UpdateUser();
        _ = result switch
        {
            true => ToastService.ShowToast(new ToastMessage(ToastType.Info, "Dice room updated!.")),
            false => ToastService.ShowToast(new ToastMessage(ToastType.Warning, "Dice room could not be updated."))
        };
    }

    private async Task CreateNewDiceRoom()
    {
        IsLoading = true;
        var id = Constants.GenerateId();
        var dataString = JsonSerializer.Serialize(new { id, name = id });
        var result = await Pb.CreateItem("dicerooms", dataString);
        _ = result switch {
            true => ToastService.ShowToast(new ToastMessage(ToastType.Info, "Created a new dice room.")),
            false => ToastService.ShowToast(new ToastMessage(ToastType.Warning, "Could not create dice room."))
        };

        if (result)
        {
            await UpdateDiceRoom(id);
        }
        IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _subs.Add(Pb.UserSubject.Subscribe(user =>
        {
            CurrentUser = user;
            _idForm.IdEntry = user?.diceroom;
        }));
        await Pb.GetUser();
        await base.OnInitializedAsync();
    }

    Task LogOut()
    {
        DiceLogService.ClearLog();
        return Pb.LogOut();
    }

    void IDisposable.Dispose()
    {
        foreach (var sub in _subs) sub.Dispose();
    }
}