@page "/"
@implements IDisposable
@using Roll10.Components
@using Roll10.Services
@using System.Text.Json
@using Roll10.Domain.Models
@inject GlobalRefreshService GlobalRefreshService
@inject DiceLogService DiceLogService
@inject PocketbaseService Pb


<Toast />
<PopupMenu />
<div class="flex flex-col items-center">
    <div class="lg:w-11/12 w-full">
        @foreach (var character in _characters)
        {
            <CharacterDescription Character="character" AllCharacterActions="_characterActions"></CharacterDescription>
        }
    </div>
</div>

@code{
    private List<Character> _characters = new();
    private List<CharacterAction> _characterActions = new();
    private readonly List<IDisposable> _subs = new();
    
    protected override async Task OnInitializedAsync()
    {
        _characters = await Pb.GetFullList<Character>("characters","","","spells,equipment,inventory");
        _characters = _characters.Select(c => c with { hp = c.durability, current_stamina = c.stamina }).ToList();
        _characterActions = await Pb.GetFullList<CharacterAction>("actions", "+created", "all_characters=true");
        
        try
        {
            await Pb.UpdateUser();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
        GlobalRefreshService.RefreshRequested += StateHasChanged;

        _subs.Add(Pb.UserSubject.Subscribe(u =>
        {
            if (!string.IsNullOrEmpty(u?.diceroom))
            {
                _ = Task.Run(async () =>
                {
                    DiceLogService.ClearLog();
                    await DiceLogService.SyncDiceLog();
                    GlobalRefreshService.CallRequestRefresh();
                    await Pb.SubscribeTo("diceroomlogs", "*",  (message) =>
                    {
                        try
                        {
                            var logEntry = JsonSerializer.Deserialize<DiceLogEntry>(message);
                            if (logEntry != null)
                            {
                                DiceLogService.AddDiceLogEntrySubject.OnNext((logEntry, true));
                            }
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e);
                        }
                        return Task.CompletedTask;
                    });
                });
            }
        }));
    }
    
    void IDisposable.Dispose()
    {
        foreach(var sub in _subs) sub.Dispose(); 
    }
}